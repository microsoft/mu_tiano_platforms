[workspace]
resolver = "2"

# Add packages that generate binaries here
members = [
  "Features/FFA/FfaFeaturePkg/SecurePartitions/MsSecurePartitionRust",
]

# Add packages that generate libraries here
[workspace.dependencies]
HidIo = {path = "Common/MU/HidPkg/Crates/HidIo"}
HiiKeyboardLayout = {path = "Common/MU/HidPkg/Crates/HiiKeyboardLayout"}
RustAdvancedLoggerDxe = {path = "Common/MU/AdvLoggerPkg/Crates/RustAdvancedLoggerDxe"}
RustBootServicesAllocatorDxe = {path = "Common/MU/MsCorePkg/Crates/RustBootServicesAllocatorDxe"}

mu_uefi_boot_services = "2.0.0"
hidparser = {version = "1.0"}
memoffset = "0.9.1"
num-traits = { version = "0.2", default-features = false}
num-derive = { version = "0.4", default-features = false}
r-efi = "5.2.0"
scroll = { version = "0.11", default-features = false, features = ["derive"]}
rustversion = "1.0.21"
spin = "0.5.2"

aarch64-cpu = "10.0.0"
aarch64-paging = { version = "0.8.1", default-features = false }
aarch64-rt = { version = "0.1.0", default-features = false, features = [
    "el1",
    "exceptions",
] }
bit-register = { git = "https://github.com/OpenDevicePartnership/odp-utilities", rev = "2f79d238" }
critical-section = { version = "1.1.0", default-features = false }
debug-non-default = { git = "https://github.com/OpenDevicePartnership/odp-utilities", rev = "2f79d238" }
ec-service-lib = { git = "https://github.com/OpenDevicePartnership/haf-ec-service" }
embassy-aarch64-haf = { git = "https://github.com/OpenDevicePartnership/haf-ec-service" }
embassy-executor = { git = "https://github.com/embassy-rs/embassy" }
embassy-futures = { git = "https://github.com/embassy-rs/embassy" }
embassy-hal-internal = { git = "https://github.com/embassy-rs/embassy" }
embassy-sync = { git = "https://github.com/embassy-rs/embassy" }
embassy-time = { git = "https://github.com/embassy-rs/embassy" }
embassy-time-driver = { git = "https://github.com/embassy-rs/embassy" }
embassy-time-queue-utils = { git = "https://github.com/embassy-rs/embassy" }
embedded-hal = { git = "https://github.com/rust-embedded/embedded-hal" }
odp-ffa = { git = "https://github.com/OpenDevicePartnership/haf-ec-service" }
hafnium = { git = "https://github.com/OpenDevicePartnership/haf-ec-service" }
test-service-lib = { path = "Features/FFA/FfaFeaturePkg/Library/TestServiceLib" }
user-sp-entry-lib = { path = "Features/FFA/FfaFeaturePkg/Library/SecurePartitionEntryPoint" }
heapless = "0.8.0"
log = { version = "0.4", default-features = false }
mockall = "0.13.1"
num_enum = { version = "0.7.3", default-features = false }
subenum = { version = "1.1.2", default-features = false }
uuid = { version = "1.0", default-features = false, features = ["v1"] }
rstest = "0.25.0"

# By default, the dev profile is used. The default build settings for the dev profile are documented here:
# https://doc.rust-lang.org/cargo/reference/profiles.html#dev
#
# Unmodified dev profile settings result in extraordinarily large binaries relative to UEFI FW. This especially
# impacts DEBUG builds which already have less optimized C code resulting in overall greater space occupation.
# Without a change, the binaries are simply too large and will continue to push the limits of firmware volumes
# (on a real system constrained by flash size) over time.
#
# Therefore, the below setting enables optimization level 3 (all optimizations) that is used by the release profile
# by default. This greatly reduces the overall binary size. [profile.dev.package."*"] is specified to apply the
# opt-level for all dependencies (but not a workspace member). This emphasizes debuggability of workspace code but
# optimizes dependencies. An individual dependency can be overridden by specifying the named package instead of "*".
# For example:
#
# [profile.dev.package.foo]
# opt-level = 0
#
# That will likely allow the overall build to still fit in the FV but remove optimizations from an individual package
# that needs to be debugged.
[profile.dev.package."*"]
opt-level = 3

[patch."https://github.com/OpenDevicePartnership/haf-ec-service"]
ec-service-lib = { path = "/mnt/d/Repos/haf-ec-service/ec-service-lib" }
embassy-aarch64-haf = { path = "/mnt/d/Repos/haf-ec-service/embassy-aarch64-haf" }
odp-ffa = { path = "/mnt/d/Repos/haf-ec-service/odp-ffa" }
hafnium = { path = "/mnt/d/Repos/haf-ec-service/hafnium" }
