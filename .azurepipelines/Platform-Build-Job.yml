## @file
# Azure Pipeline build file for building platforms with GCC.
#
# Copyright (c) Microsoft Corporation.
# SPDX-License-Identifier: BSD-2-Clause-Patent
##

parameters:
- name: extra_install_step
  displayName: Extra Install Steps
  type: stepList
  default:
    - script: echo No extra steps provided
- name: tool_chain_tag
  displayName: Tool Chain (e.g. VS2022)
  type: string
  default: ''
- name: vm_image
  displayName: Virtual Machine Image (e.g. windows-latest)
  type: string
  default: 'windows-latest'
- name: container_image
  displayName: Container Image
  type: string
  default: ''

jobs:
  - job: PlatformBuild_${{ parameters.tool_chain_tag }}
    displayName: Build Platforms

    variables:
      - name: run_flags
        value: "SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE EMPTY_DRIVE=TRUE TEST_REGEX=*TestApp*.efi RUN_TESTS=TRUE"
      - name: run_flags_no_tests
        value: "SHUTDOWN_AFTER_RUN=TRUE QEMU_HEADLESS=TRUE"

    # Use matrix to speed up the build process
    strategy:
      matrix:

        QemuQ35_DEBUG:
          Build.Package: QemuQ35Pkg
          Build.File: "Platforms/QemuQ35Pkg/PlatformBuild.py"
          Build.Arch: IA32,X64
          Build.Flags: ""
          Build.Target: "DEBUG"
          Build.ExtraTag: ""
          Run: true
          Run.Flags: $(run_flags) BLD_*_QEMU_CORE_NUM=2
          Build.ArtifactsBinary: |
            **/QEMUQ35_*.fd
          Build.ArtifactsOther: "**/unit_test_results/*"

        QemuQ35_RELEASE:
          Build.Package: QemuQ35Pkg
          Build.File: "Platforms/QemuQ35Pkg/PlatformBuild.py"
          Build.Arch: IA32,X64
          Build.Flags: ""
          Build.Target: "RELEASE"
          Build.ExtraTag: ""
          Run: true
          Run.Flags: $(run_flags) BLD_*_QEMU_CORE_NUM=2
          Build.ArtifactsBinary: |
            **/QEMUQ35_*.fd
          Build.ArtifactsOther: "**/unit_test_results/*"

        QemuQ35_NO_SMM_RELEASE:
          Build.Package: QemuQ35Pkg
          Build.File: "Platforms/QemuQ35Pkg/PlatformBuild.py"
          Build.Arch: IA32,X64
          Build.Flags: "BLD_*_SMM_ENABLED=FALSE"
          Build.Target: "RELEASE"
          Build.ExtraTag: "NO_SMM"
          Run: true
          Run.Flags: $(run_flags_no_tests) BLD_*_QEMU_CORE_NUM=2 BLD_*_SMM_ENABLED=FALSE
          Build.ArtifactsBinary: |
            **/QEMUQ35_*.fd
          Build.ArtifactsOther: ""

        ${{ if eq(parameters.tool_chain_tag, 'GCC5') }}:
          QemuSbsa_DEBUG:
            Build.Package: QemuSbsaPkg
            Build.File: "Platforms/QemuSbsaPkg/PlatformBuild.py"
            Build.Arch: AARCH64
            Build.Flags: ""
            Build.Target: "DEBUG"
            Build.ExtraTag: ""
            Run: true
            Run.Flags: $(run_flags)
            Build.ArtifactsBinary: |
              **/QEMU_EFI.fd
              **/SECURE_FLASH0.fd
            Build.ArtifactsOther: "**/unit_test_results/*"

          QemuSbsa_RELEASE:
            Build.Package: QemuSbsaPkg
            Build.File: "Platforms/QemuSbsaPkg/PlatformBuild.py"
            Build.Arch: AARCH64
            Build.Flags: ""
            Build.Target: "RELEASE"
            Build.ExtraTag: ""
            Run: true
            Run.Flags: $(run_flags)
            Build.ArtifactsBinary: |
              **/QEMU_EFI.fd
              **/SECURE_FLASH0.fd
            Build.ArtifactsOther: "**/unit_test_results/*"

    workspace:
      clean: all

    ${{ if ne(parameters.container_image, '') }}:
      container: ${{ parameters.container_image }}

    pool:
      vmImage: ${{ parameters.vm_image }}

    steps:
    - ${{ if and(ne(parameters.container_image, ''), not(contains(parameters.vm_image, 'windows'))) }}:
      - script: echo "##vso[task.prependpath]/home/vsts_azpcontainer/.local/bin"
        displayName: Add User Local Bin to Path
      - script: sudo dnf install -y mtools dosfstools
        displayName: Install mtools and dosfstools
    - template: Steps/BuildPlatform.yml@mu_devops
      parameters:
        tool_chain_tag: ${{ parameters.tool_chain_tag }}
        build_pkg: $(Build.Package)
        build_target: $(Build.Target)
        build_arch: $(Build.Arch)
        build_file: $(Build.File)
        build_flags: $(Build.Flags)
        run_flags: $(Run.Flags)
        run_timeout: 25
        extra_install_step: ${{ parameters.extra_install_step }}
        install_tools: ${{ eq(parameters.container_image, '') }}
        artifacts_identifier: '$(Build.Package) ${{ parameters.tool_chain_tag }} $(Build.Target) $(Build.ExtraTag)'
        artifacts_binary: $(Build.ArtifactsBinary)
        artifacts_other: $(Build.ArtifactsOther)
